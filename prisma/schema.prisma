generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// outside auth
model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?
  createdAt     DateTime  @default(now())
  posts         Post[]
  comments      Comment[]
  avatar        String?
  bio           String?
  followersNo   Int       @default(0)
  followingNo   Int       @default(0)
  followers     User[]    @relation("users")
  following     User[]    @relation("users")
}

model Post {
  id         String    @id @default(cuid())
  title      String
  content    Json
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  comments   Comment[]
  thumbnail  String?
  createdAt  DateTime  @default(now())
  likes      Int       @default(0)
  views      Int       @default(0)
  commentsNo Int       @default(0)
  tags       Tag[]
}

model Comment {
  id      String   @id @default(cuid())
  content String
  date    DateTime @default(now())
  likes   Int
  userId  String
  postId  String
  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])
}

model Tag {
  id    String @id @default(cuid())
  posts Post[]
  name  String
}
